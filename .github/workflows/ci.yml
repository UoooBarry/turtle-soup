name: Dev Project Build and Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Docker Buildx for caching
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to GitHub Container Registry (to enable caching if using GHCR)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version # Check Docker Compose version to verify the installation 

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        push: true
        target: prod
        tags: ${{ secrets.DOCKER_IMAGE_TAG }}:prod
        cache-from: type=registry,ref=${{ secrets.DOCKER_IMAGE_TAG }}:prod
        cache-to: type=inline

  deployment:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: vue/node_modules
          key: node_modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            node_modules-${{ runner.os }}-

      - name: Cache Bun modules
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Build project
        run: cd vue && bun build

      - name: SSH and Deploy
        if: github.ref == 'refs/heads/main'
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_TAG: ${{ secrets.DOCKER_IMAGE_TAG }}:prod
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts

          rsync -avz --delete vue/dist/ $DEPLOY_USER@$DEPLOY_SERVER:${{ secrets.REPO_PATH }}/vue/dist

          ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER << 'EOF'
            set -e
            docker stop turtle-soup || true
            docker rm turtle-soup || true

            echo "Pulling latest code from Git repository..."
            cd ${{ secrets.REPO_PATH }}
            git pull

            echo "Building .env"
            echo "${{ secrets.DOTENV }}" > ./.env

            echo "Logging into Docker registry..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            echo "Pulling Docker image..."
            docker pull ${{ secrets.DOCKER_IMAGE_TAG }}:prod

            echo "Starting new Docker container..."
            touch .env
            docker run --env-file .env --network=host --restart=always -d --name turtle-soup -p 8082:8082 ${{ secrets.DOCKER_IMAGE_TAG }}:prod

            echo "Testing and reloading Nginx..."
            sudo nginx -t
            sudo systemctl reload nginx
          EOF
